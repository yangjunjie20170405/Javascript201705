{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,MAAM,QAAQ,KAAR,CAAV;AACA,IAAI,SAAS,KAAK,YAAL,CAAkB,UAAU,GAAV,EAAc,GAAd,EAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA,QAAI,SAAS,IAAI,KAAJ,CAAU,IAAI,GAAd,EAAkB,IAAlB,CAAb;AACA,QAAI,WAAW,OAAO,UAAP,CAAf;AACA,QAAI,QAAQ,OAAO,OAAP,CAAZ,CAR8C,CAQjB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,MAAM,2BAAV,CA5B8C,CA4BR;AACtC,QAAG,IAAI,IAAJ,CAAS,QAAT,CAAH,EAAsB;AAClB;AACA,YAAI,SAAS,IAAI,IAAJ,CAAS,QAAT,EAAmB,CAAnB,EAAsB,WAAtB,EAAb,CAFkB,CAE+B;AACjD,YAAI,aAAa,YAAjB;AACA,gBAAO,MAAP;AACI,iBAAK,MAAL;AACI,6BAAa,WAAb;AACA;AACJ,iBAAK,KAAL;AACI,6BAAa,UAAb;AACA;AACJ,iBAAK,IAAL;AACI,6BAAa,iBAAb;AACA;AACJ,iBAAK,MAAL;AACI,6BAAa,kBAAb;AACA;AACJ,iBAAK,KAAL;AACI,6BAAa,0BAAb;AACA;AAfR;AAiBH;AACD,QAAG;AACC,YAAI,UAAU,GAAG,YAAH,CAAgB,MAAI,QAApB,EAA6B,OAA7B,CAAd;AACA;AACA,YAAI,SAAJ,CAAc,GAAd,EAAkB,EAAC,gBAAe,aAAW,iBAA3B,EAAlB;AACA,YAAI,GAAJ,CAAQ,OAAR;AACH,KALD,CAKC,OAAM,CAAN,EAAQ;AACL,YAAI,SAAJ,CAAc,GAAd,EAAkB,EAAC,gBAAe,2BAAhB,EAAlB;AACA,YAAI,GAAJ,CAAQ,2BAAR;AACH;AACJ,CA5DY,CAAb;AA6DA;AACA,OAAO,MAAP,CAAc,EAAd,EAAiB,YAAY;AACzB,YAAQ,GAAR,CAAY,cAAZ;AACH,CAFD;AAGA;AACA;AACA;AACA","file":"server-compiled.js","sourcesContent":["//  引入模块\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar url = require(\"url\");\nvar server = http.createServer(function (req,res) {\n    // 当请求对应的端口号，执行这个函数\n    // req.url\n    // url.parse ()参数有true，在方法的返回值里面query属性值： url这个地址？后面的值当成键值对存储到query中;不加true是字符串，加true 就变成一个对象\n    //www.zhufengpeixun.com?uername=12&password=199;\n    // {query:{username:12,password:199}}\n    var urlObj = url.parse(req.url,true);\n    var pathname = urlObj[\"pathname\"];\n    var query = urlObj[\"query\"]; //加true {username:niu,password:123}\n    // 没有加true \"username=niu&password=123\"\n    // console.log(urlObj)\n    // if(pathname === \"/index.html\"){\n    //     // 读取index.html 里面的内容\n    //     var content = fs.readFileSync(\"./index.html\",\"utf-8\");\n    //     res.end(content);\n    //     return;\n    // }\n    // if(pathname === \"/css/index.css\"){\n    //     var con = fs.readFileSync(\"./css/index.css\",\"utf-8\");\n    //     res.end(con);\n    //     return;\n    // }\n    // if(pathname === \"/js/index.js\"){\n    //     var content = fs.readFileSync(\"./js/index.js\",\"utf-8\");\n    //     res.end(content);\n    //     return;\n    // }\n    // res.end()\n    var reg = /\\.(HTML|JS|CSS|JSON|ICO)/i;// 忽略大小写\n    if(reg.test(pathname)){\n        // console.log(reg.exec(pathname))\n        var suffix = reg.exec(pathname)[1].toUpperCase();// 转换成大写\n        var suffixMIME = \"text/plain\";\n        switch(suffix){\n            case \"HTML\":\n                suffixMIME = \"text/html\";\n                break;\n            case \"CSS\":\n                suffixMIME = \"text/css\";\n                break;\n            case \"JS\":\n                suffixMIME = \"text/javascript\";\n                break;\n            case \"JSON\":\n                suffixMIME = \"application/json\";\n                break;\n            case \"ICO\":\n                suffixMIME = \"application/octet-stream\";\n                break;\n        }\n    }\n    try{\n        var conFile = fs.readFileSync(\".\"+pathname,\"utf-8\");\n        //设置响应头\n        res.writeHead(200,{'content-type':suffixMIME+';charset=utf-8;'});\n        res.end(conFile)\n    }catch(e){\n        res.writeHead(404,{'content-type':'text/plain;charset=utf-8;'});\n        res.end(\"request file is not found\")\n    }\n});\n//监听服务\nserver.listen(80,function () {\n    console.log(\"当前80端口已经监听成功\")\n});\n// MIME 类型\n// m每一个文件都有自己的标识类型  比如：HTML文件 MIME类型 是\"text/html\"\n// css 文件MIME 是 \"text/css\"\n// 浏览器会按照代码的MIME 类型\n\n\n"]}